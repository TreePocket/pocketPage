(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{205:function(a,s,t){"use strict";t.r(s);var v=t(6),_=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[a._v("#")]),a._v(" 数据结构")]),a._v(" "),t("h2",{attrs:{id:"数据结构分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构分类"}},[a._v("#")]),a._v(" 数据结构分类")]),a._v(" "),t("h4",{attrs:{id:"按逻辑结构分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按逻辑结构分类"}},[a._v("#")]),a._v(" 按逻辑结构分类")]),a._v(" "),t("ul",[t("li",[a._v("集合(无逻辑关系)")]),a._v(" "),t("li",[a._v("线性结构(线性表)\n"),t("ul",[t("li",[a._v("一维数组")]),a._v(" "),t("li",[a._v("队列")]),a._v(" "),t("li",[a._v("栈")])])]),a._v(" "),t("li",[a._v("非线性结构\n"),t("ul",[t("li",[a._v("树")]),a._v(" "),t("li",[a._v("图")]),a._v(" "),t("li",[a._v("多维数组")])])])]),a._v(" "),t("h4",{attrs:{id:"按存储结构分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按存储结构分类"}},[a._v("#")]),a._v(" 按存储结构分类")]),a._v(" "),t("ul",[t("li",[a._v("顺序存储结构")])]),a._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Node")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("ul",[t("li",[a._v("链式存储结构")])]),a._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("linkNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("ul",[t("li",[a._v("索引存储结构")]),a._v(" "),t("li",[a._v("散列存储结构")])]),a._v(" "),t("h2",{attrs:{id:"线性表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[a._v("#")]),a._v(" 线性表")]),a._v(" "),t("p",[a._v("线性表是具有相同数据类型的n个数据元素的有限序列")]),a._v(" "),t("ul",[t("li",[a._v("物理结构为顺序表和链表")])]),a._v(" "),t("h4",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),t("ul",[t("li",[a._v("表中元素个数有限")]),a._v(" "),t("li",[a._v("表中元素具有逻辑上的顺序性，在序列中各个元素排列有其先后次序")]),a._v(" "),t("li",[a._v("表中元素都是数据元素，每个元素都是单个元素")]),a._v(" "),t("li",[a._v("表中元素的数据类型都相同，意味着每个元素占有相同大小的存储空间")]),a._v(" "),t("li",[a._v("表中元素具有抽象性")]),a._v(" "),t("li",[a._v("线性表是一种逻辑结构 ，表示元素之间一对一相邻的关系")])]),a._v(" "),t("h3",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),t("ul",[t("li",[a._v("只允许在一端进行插入或删除操作的线性表")]),a._v(" "),t("li",[a._v("先进后出")])]),a._v(" "),t("h3",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[a._v("#")]),a._v(" 队列")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("只允许在表的一端进行插入，表的另一端进行删除操作的线性表")])]),a._v(" "),t("li",[t("p",[a._v("先进先出")])])]),a._v(" "),t("h2",{attrs:{id:"树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[a._v("#")]),a._v(" 树")]),a._v(" "),t("p",[a._v("​\t树是由若干个有限节点组成的一个具有层次关系的集合")]),a._v(" "),t("h3",{attrs:{id:"基本术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本术语"}},[a._v("#")]),a._v(" 基本术语")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("度：树中一个结点的子结点的个数称为该结点的度")]),a._v(" "),t("ul",[t("li",[a._v("树中最大度数称为树的度")]),a._v(" "),t("li",[a._v("分支结点：度>0")]),a._v(" "),t("li",[a._v("叶子结点：度=0")])])]),a._v(" "),t("li",[t("p",[a._v("结点的层次：根节点为第一层 依次向下增加")])]),a._v(" "),t("li",[t("p",[a._v("结点的高度：最底层结点高度为1 依次向上增加")])]),a._v(" "),t("li",[t("p",[a._v("结点的深度：根节点深度为1 依次向下增加")])]),a._v(" "),t("li",[t("p",[a._v("树的高度(深度)是树种结点的最大层数")])]),a._v(" "),t("li",[t("p",[a._v("路径：树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的，不包括边（因为树中的分支是有向的，即从双亲结点指向孩子结点，所以路径一定是自上而下的）")])]),a._v(" "),t("li",[t("p",[a._v("路径长度：路径上所经历的边的个数")])]),a._v(" "),t("li",[t("p",[a._v("森林：m棵互不相交的树的集合")])])]),a._v(" "),t("h3",{attrs:{id:"树的性质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树的性质"}},[a._v("#")]),a._v(" 树的性质")]),a._v(" "),t("ul",[t("li",[a._v("一棵树中每两个点之间有且只有一条路")]),a._v(" "),t("li",[a._v("一棵具有N个点的树有N-1条边")]),a._v(" "),t("li",[a._v("树中的结点数等于所有结点的度数+1")]),a._v(" "),t("li",[a._v("度为m的树中第i层上至多有m^(i-1)个结点")]),a._v(" "),t("li",[a._v("高度为h的m叉树至多有(m^h - 1)/(m-1)个结点")])]),a._v(" "),t("h3",{attrs:{id:"树的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树的遍历"}},[a._v("#")]),a._v(" 树的遍历")]),a._v(" "),t("p",[a._v("按照某种规则，不重复地访问某种树的所有节点")]),a._v(" "),t("ul",[t("li",[a._v("先序遍历(深度优先)")]),a._v(" "),t("li",[a._v("中序遍历(深度优先)")]),a._v(" "),t("li",[a._v("后序遍历(深度优先)")]),a._v(" "),t("li",[a._v("层次遍历(广度优先)")])]),a._v(" "),t("h3",{attrs:{id:"树的衍生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树的衍生"}},[a._v("#")]),a._v(" 树的衍生")]),a._v(" "),t("p",[a._v("无序树：树中任意结点的子结点之间没有顺序关系，这种树称为无序树，也称为自由树")]),a._v(" "),t("p",[a._v("有序树：树中任意结点的子结点之间有顺序关系")]),a._v(" "),t("p",[a._v("二叉树：每个节点最多含有两个子树的树称为二叉树")]),a._v(" "),t("p",[a._v("完全二叉树：除了最后一层，其他各层节点数都达到最大")]),a._v(" "),t("p",[a._v("满二叉树：每一层上的结点数都是最大结点数")]),a._v(" "),t("p",[a._v("霍夫曼树：带权路径最短的二叉树，也叫最优二叉树")])])}),[],!1,null,null,null);s.default=_.exports}}]);